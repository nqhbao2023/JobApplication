import { 
  Alert, ScrollView, StyleSheet, Text, TouchableOpacity, View, Image, Platform, StatusBar 
} from 'react-native';
import React, { useEffect, useState, useCallback } from 'react';
import { useLocalSearchParams, router } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import { db, auth, storage } from '../../src/config/firebase';
import { ref as storageRef, deleteObject } from 'firebase/storage';
import { collection, addDoc, deleteDoc, doc, query, where, getDocs, getDoc,writeBatch } from 'firebase/firestore';
import { useFocusEffect } from '@react-navigation/native';
import { useRole } from '@/contexts/RoleContext';
import { smartBack } from "@/utils/navigation";
import { ActivityIndicator } from 'react-native-paper';
import { useRef } from "react";
import { useJobStatus } from "@/hooks/useJobStatus";
import { onAuthStateChanged } from "firebase/auth";
const JobDescription = () => {
  const [selected, setSelected] = useState(0);

const params = useLocalSearchParams<{
  id?: string;
  jobId?: string;
  success?: string;
  fromApplied?: string;
  status?: string;
  appliedAt?: string;
}>();

// CH·ªà d√πng bi·∫øn jobId n√†y trong file
const jobId = (params.jobId || params.id || "") as string;
const { success, fromApplied, status, appliedAt } = params;

  
  const [userId, setUserId] = useState<string>('');
  const [loadding, setLoadding] = useState<boolean>(false);
  const [dataJob, setDataJob] = useState<any>(null);
  const [posterInfo, setPosterInfo] = useState<{ name?: string; email?: string }>({});
  const [isApplied, setIsApplied] = useState(false);
  const [applyDocId, setApplyDocId] = useState<string | null>(null);
  const [appliedLoading, setAppliedLoading] = useState(true);
  const { isSaved, saveLoading, toggleSave } = useJobStatus(jobId || undefined as any);
  const [fromAppliedImmediate, setFromAppliedImmediate] = useState(false);
const checkingRef = useRef(false);


const { role: userRole, loading: roleLoading } = useRole();
// ‚úÖ gom c√°c kh·∫£ nƒÉng ƒë·∫∑t field owner trong job
const resolveOwnerId = (job: any): string | null => {
  const v =
    job?.ownerId ??
    job?.userId ??
    job?.createdBy ??
    job?.created_by ??
    job?.uid ??
    job?.posterId ??
    job?.users ?? null; // c√≥ n∆°i l∆∞u th·∫≥ng 'users' = string/object

  if (!v) return null;
  if (typeof v === 'string') return v;
  if (typeof v === 'object') {
    if (typeof v.id === 'string') return v.id;
    if (typeof v.uid === 'string') return v.uid;
  }
  return null;
};

const jobOwnerId = resolveOwnerId(dataJob);
const isOwner = !!userId && !!jobOwnerId && jobOwnerId === userId;

// üîê Candidate ch·ªâ khi kh√¥ng ph·∫£i ch·ªß job
const showCandidateUI = userRole === 'candidate' && !isOwner;
// üõ† Employer ch·ªâ khi l√† ch·ªß job
const showEmployerUI = userRole === 'employer' && isOwner;
  // ‚úÖ Load user & saved jobs
useEffect(() => {
  const unsubscribe = onAuthStateChanged(auth, (user) => {
    if (user) {
      setUserId(user.uid);
      // ‚úÖ G·ªçi check ngay khi userId c√≥ th·∫≠t
      if (jobId) checkIfApplied();
    } else {
      setUserId("");
    }
  });
  return unsubscribe;
}, [jobId]);



useEffect(() => {
  if (!userId || !jobId) return;
  checkIfApplied();
}, [userId, jobId, success]);

useEffect(() => {
  if (fromApplied && fromApplied === 'true') {
    setFromAppliedImmediate(true);
  }
}, [fromApplied]);

//useEffect(() => {
//if (userId) load_data_save_jobs();
//}, [userId]);
useEffect(() => {
  if (jobId) load_data(jobId as string);
}, [jobId]);


  // ‚úÖ Check n·∫øu user ƒë√£ apply
const checkIfApplied = async () => {
  // ch·∫∑n g·ªçi khi ch∆∞a s·∫µn s√†ng
  if (!userId || !jobId) {
    setAppliedLoading(false);
    return;
  }
  // ch·∫∑n g·ªçi tr√πng
  if (checkingRef.current) return;
  checkingRef.current = true;

  setAppliedLoading(true);
  try {
    const q = query(
      collection(db, "applied_jobs"),
      where("userId", "==", userId),
      where("jobId", "==", jobId)
    );
    const res = await getDocs(q);
    console.log(`üì¶ Applied job found: ${res.size > 0 ? "YES" : "NO"}`);

    if (!res.empty) {
      const docData = res.docs[0].data();
      setApplyDocId(res.docs[0].id);
      setIsApplied(!!(docData.cv_url || docData.cv_uploaded));
    } else {
      setIsApplied(false);
      setApplyDocId(null);
    }
  } catch (err) {
    console.error("Check applied error:", err);
  } finally {
    setAppliedLoading(false);
    checkingRef.current = false; // ‚úÖ reset flag
  }
};


  // ‚úÖ Khi quay l·∫°i focus trang
useFocusEffect(
  useCallback(() => {
    if (!userId || !jobId) return;
    console.log('üîÅ Refreshing applied status...');
    const timer = setTimeout(() => {
      checkIfApplied();
    }, 200);
    return () => clearTimeout(timer);
  }, [userId, jobId])
);


useEffect(() => {
  // Ch·ªâ log khi userId ƒë√£ c√≥ gi√° tr·ªã th·∫≠t
  if (!userId) return;
  console.log(
    'üîé role:', userRole,
    'loading:', roleLoading,
    'userId:', userId,
    'jobOwnerId:', jobOwnerId,
    'isOwner:', isOwner,
    'showCandidateUI:', showCandidateUI,
    'showEmployerUI:', showEmployerUI
  );
}, [userRole, roleLoading, userId, jobOwnerId, isOwner, showCandidateUI, showEmployerUI]);


  // ‚úÖ Khi success=true (upload CV th√†nh c√¥ng)
useEffect(() => {
  if (success === 'true') {
    Alert.alert('üéâ Th√†nh c√¥ng', 'B·∫°n ƒë√£ n·ªôp CV th√†nh c√¥ng!');
    if (userId) {
      checkIfApplied();        // G·ªçi ngay khi ƒë√£ c√≥ userId
    }
  }
}, [success, userId]);         // ‚¨ÖÔ∏è th√™m userId v√†o deps

  const load_userId = async () => {
    const user = auth.currentUser;
    if (user) setUserId(user.uid);
  };

  const load_data = async (id: string) => {
    try {
      const docRef = doc(db, 'jobs', id);
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        const result = docSnap.data();
        setDataJob(result);

        if (result.users?.id) {
          const userRef = doc(db, 'users', result.users.id);
          const userSnap = await getDoc(userRef);
          if (userSnap.exists()) {
            const userDoc = userSnap.data();
            setPosterInfo({
              name: userDoc.name,
              email: userDoc.email,
            });
          }
        }
      } else {
        setDataJob(null);
      }
    } catch (error) {
      console.error('Load job error:', error);
      setDataJob(null);
    }
  };



const handleApply = async () => {
  if (!userId) {
    Alert.alert("Th√¥ng b√°o", "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi ·ª©ng tuy·ªÉn");
    return;
  }
  if (!jobId) {
    Alert.alert("L·ªói", "Thi·∫øu Job ID");
    return;
  }

  try {
    console.log("üöÄ Apply with:", { userId, jobId });

    const q = query(
      collection(db, "applied_jobs"),
      where("userId", "==", userId),
      where("jobId", "==", jobId)
    );
    const res = await getDocs(q);
    const deletePromises = res.docs.map((d) => deleteDoc(d.ref));
    await Promise.all(deletePromises);

    const jobRef = doc(db, "jobs", jobId);
    const jobSnap = await getDoc(jobRef);
    const jobData = jobSnap.exists() ? jobSnap.data() : null;

    // ‚úÖ L·∫•y ownerId t·ª´ job ƒë√£ resolve
        const docRef = await addDoc(collection(db, "applied_jobs"), {
          userId,
          jobId,
          employerId: jobOwnerId || "",   // ‚úÖ d√πng owner ƒë√£ resolve s·∫µn
          cv_uploaded: false,
          status: "draft",
          applied_at: new Date().toISOString(),
        });

    // ‚úÖ C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
    setIsApplied(true);
    setAppliedLoading(false);

    router.replace(
      `/submit?jobId=${jobId}&userId=${userId}&applyDocId=${docRef.id}` as any
    );
  } catch (err) {
    console.error("‚ùå Apply failed:", err);
    Alert.alert("L·ªói", "Kh√¥ng th·ªÉ ·ª©ng tuy·ªÉn c√¥ng vi·ªác n√†y, th·ª≠ l·∫°i sau!");
  }
};

  const handleCancelApply = async () => {
    if (!applyDocId) return;
    try {
      setLoadding(true);
      const applyRef = doc(db, 'applied_jobs', applyDocId);
      const applySnap = await getDoc(applyRef);
      if (applySnap.exists()) {
        const data = applySnap.data();
        if (data.cv_url) {
          const fileRef = storageRef(storage, data.cv_url);
          await deleteObject(fileRef)
            .then(() => console.log('üóëÔ∏è CV file deleted from Storage'))
            .catch((err) => console.warn('‚ö†Ô∏è Storage delete failed:', err));
        }
      }
      await deleteDoc(applyRef);
      setIsApplied(false);
      setAppliedLoading(false);
      setApplyDocId(null);
      Alert.alert('‚úÖ Th√†nh c√¥ng', 'ƒê√£ h·ªßy ·ª©ng tuy·ªÉn v√† x√≥a file CV.');
    } catch (err) {
      console.error('‚ùå Cancel failed:', err);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ h·ªßy ·ª©ng tuy·ªÉn ho·∫∑c x√≥a file CV.');
    } finally {
      setLoadding(false);
    }
  };
const handleDeleteJob = async () => {
  Alert.alert(
    "X√≥a c√¥ng vi·ªác?",
    // Th√™m c·∫£nh b√°o r√µ r√†ng h∆°n
    "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†i ƒëƒÉng n√†y? M·ªçi d·ªØ li·ªáu (l∆∞·ª£t apply, l∆∞·ª£t save) li√™n quan c≈©ng s·∫Ω b·ªã x√≥a.", 
    [
      { text: "H·ªßy", style: "cancel" },
      {
        text: "X√≥a",
        style: "destructive",
        onPress: async () => {
          // ƒê√¢y l√† ph·∫ßn 'c√† ph√™' m√¨nh th√™m v√†o n√®!
          try {
            setLoadding(true); // B·∫≠t loading
            console.log(`üî• B·∫Øt ƒë·∫ßu x√≥a Job ID: ${jobId}`);

            const jobRef = doc(db, 'jobs', jobId);
            
            // 1. T√¨m t·∫•t c·∫£ 'applied_jobs' li√™n quan
            const appliedQuery = query(collection(db, 'applied_jobs'), where('jobId', '==', jobId));
            const appliedSnap = await getDocs(appliedQuery);
            
            // 2. T√¨m t·∫•t c·∫£ 'saved_jobs' li√™n quan
            // (Anh gi·∫£ s·ª≠ collection t√™n l√† 'saved_jobs', em ch·ªânh l·∫°i n·∫øu t√™n kh√°c nh√©)
            const savedQuery = query(collection(db, 'saved_jobs'), where('jobId', '==', jobId));
            const savedSnap = await getDocs(savedQuery);

            // 3. D√πng WriteBatch cho an to√†n (all or nothing)
            const batch = writeBatch(db);

            // Th√™m job ch√≠nh v√†o batch
            batch.delete(jobRef);

            // Th√™m t·∫•t c·∫£ applied docs v√†o batch
            appliedSnap.forEach(d => batch.delete(d.ref));

            // Th√™m t·∫•t c·∫£ saved docs v√†o batch
            savedSnap.forEach(d => batch.delete(d.ref));

            // 4. Th·ª±c thi batch!
            await batch.commit();

            Alert.alert("‚úÖ ƒê√£ x√≥a!", "C√¥ng vi·ªác v√† d·ªØ li·ªáu li√™n quan ƒë√£ ƒë∆∞·ª£c x√≥a.");
            console.log(`‚úÖ X√≥a th√†nh c√¥ng Job ID: ${jobId} (v√† ${appliedSnap.size} applied, ${savedSnap.size} saved)`);
            
            // X√≥a xong th√¨ 'l∆∞·ª£n' (quay v·ªÅ trang tr∆∞·ªõc)
            smartBack(); 

          } catch (err) {
            console.error("L·ªói khi x√≥a job:", err);
            Alert.alert("L·ªói", "Kh√¥ng th·ªÉ x√≥a c√¥ng vi·ªác. Vui l√≤ng th·ª≠ l·∫°i.");
          } finally {
            setLoadding(false); // T·∫Øt loading d√π th√†nh c√¥ng hay th·∫•t b·∫°i
          }
        },
      },
    ]
  );
};

  return (
    <View style={styles.container}>
      <ScrollView style={styles.scrollContent} contentContainerStyle={{ paddingBottom: 120 }}>
        {/* Header */}
        <View style={styles.topView}>
<TouchableOpacity
  style={styles.buttons}
  onPress={() => {
    if (fromApplied === "true") {
      // üëá N·∫øu ƒë·∫øn t·ª´ trang AppliedJob
      router.replace("/(candidate)/appliedJob");
    } else {
      // üëá Ng∆∞·ª£c l·∫°i, d√πng smartBack nh∆∞ b√¨nh th∆∞·ªùng (v·ªÅ Home)
      smartBack();
    }
  }}
>
  <Ionicons name="arrow-back" size={24} />
</TouchableOpacity>


          <TouchableOpacity style={styles.buttons} onPress={() => router.push('/')}>
            <Ionicons name="share-social" size={24} />
          </TouchableOpacity>
        </View>

        {/* Job Info */}
        <View style={styles.headerContainer}>
          <View style={styles.jobImageContainer}>
            <Image style={styles.jobImage} source={{ uri: dataJob?.image || 'https://placeholder.com/default-image.png' }} />
          </View>
          <View style={styles.companyName}>
            <Text style={styles.companyNameText}>{dataJob?.title}</Text>
            <Text style={styles.companyNameText}>{dataJob?.company?.corp_name ?? 'ƒêang t·∫£i...'}</Text>
          </View>
          <View style={styles.jobInfoContainer}>
            <View style={styles.jobInfoBox}>
              <Text style={styles.jobInfoText}>{dataJob?.jobTypes?.type_name || 'No Job Type'}</Text>
            </View>
            <View style={styles.jobInfoBox}>
              <Text style={styles.jobInfoText}>{dataJob?.jobCategories?.category_name || 'No Job Category'}</Text>
            </View>
          </View>
          <View style={styles.companyInfoBox}>
            <Text style={styles.companyInfoText}>$ {dataJob?.salary}</Text>
            <View style={styles.companyLocation}>
              <Text style={styles.companyInfoText}>{dataJob?.company?.city} / </Text>
              <Ionicons style={styles.companyInfoText2} name="location" size={20} />
              <Text style={styles.companyInfoText2}>{dataJob?.company?.nation || 'No Nation'}</Text>
            </View>
          </View>
        </View>

        {/* Tabs */}
        <View style={styles.tabs}>
          <TouchableOpacity style={[styles.tabBox, selected === 0 ? styles.tabActive : styles.tabNormal]} onPress={() => setSelected(0)}>
            <Text style={[selected === 0 ? styles.tabActiveText : styles.tabNormalText]}>About</Text>
          </TouchableOpacity>
          <TouchableOpacity style={[styles.tabBox, selected === 1 ? styles.tabActive : styles.tabNormal]} onPress={() => setSelected(1)}>
            <Text style={[selected === 1 ? styles.tabActiveText : styles.tabNormalText]}>Qualification</Text>
          </TouchableOpacity>
          <TouchableOpacity style={[styles.tabBox, selected === 2 ? styles.tabActive : styles.tabNormal]} onPress={() => setSelected(2)}>
            <Text style={[selected === 2 ? styles.tabActiveText : styles.tabNormalText]}>Responsibility</Text>
          </TouchableOpacity>
          
        </View>
        {(fromAppliedImmediate || isApplied) && (
  <View style={styles.appliedInfoBox}>
    <View style={{ flexDirection: 'row', alignItems: 'center', gap: 6 }}>
      <Ionicons name="checkmark-done" size={18} color="#34C759" />
      <Text style={styles.appliedInfoText}>ƒê√£ ·ª©ng tuy·ªÉn</Text>
    </View>
    {!!status && <Text style={styles.appliedInfoStatus}>Tr·∫°ng th√°i: {String(status)}</Text>}
    {!!appliedAt && (
      <Text style={styles.appliedInfoDate}>
        Ng√†y n·ªôp: {new Date(appliedAt).toLocaleDateString('vi-VN')}
      </Text>
    )}
  </View>
)}


        {/* Content */}
        <View style={styles.contentTab}>
          {selected === 0 ? (
            <View>
              <Text style={styles.descriptionContent}>Ng∆∞·ªùi ƒëƒÉng: {posterInfo.name || posterInfo.email || '·∫®n danh'}</Text>
              <Text style={styles.descriptionContent}>{dataJob?.job_Description || 'Kh√¥ng c√≥ m√¥ t·∫£ c√¥ng vi·ªác'}</Text>
              <Text style={styles.descriptionContent}>{dataJob?.skills_required || 'Kh√¥ng c√≥ k·ªπ nƒÉng y√™u c·∫ßu'}</Text>
              <Text style={styles.descriptionContent}>{dataJob?.responsibilities || 'Kh√¥ng c√≥ tr√°ch nhi·ªám c√¥ng vi·ªác'}</Text>
            </View>
          ) : selected === 1 ? (
            <Text style={styles.descriptionContent}>{dataJob.skills_required}</Text>
          ) : (
            <Text style={styles.descriptionContent}>{dataJob.responsibilities}</Text>
          )}
        </View>
      </ScrollView>

{/* Bottom Buttons */}
<View style={styles.bottomContainer}>
{/* ‚ù§Ô∏è Save/Unsave */}
{showCandidateUI && (
  <TouchableOpacity
    style={styles.heartContainer}
    onPress={toggleSave}
    disabled={saveLoading}
  >
    <Ionicons
      name={isSaved ? "heart" : "heart-outline"}
      size={24}
      color="red"
    />
  </TouchableOpacity>
)}


{/* üöÄ Apply / Cancel */}
{showCandidateUI && (
  !userId ? (
    <TouchableOpacity style={[styles.applyContainer, { backgroundColor: '#eee' }]} disabled>
      <ActivityIndicator size="small" color="#F97459" />
    </TouchableOpacity>
  ) : appliedLoading ? (
    <TouchableOpacity style={[styles.applyContainer, { backgroundColor: '#eee' }]} disabled>
      <ActivityIndicator size="small" color="#F97459" />
    </TouchableOpacity>
  ) : (fromAppliedImmediate || isApplied) ? (
    <TouchableOpacity
      style={[styles.applyContainer, { backgroundColor: '#ccc' }]}
      onPress={handleCancelApply}
    >
      <Text style={styles.applyText}>Cancel Apply</Text>
    </TouchableOpacity>
  ) : (
    <TouchableOpacity
      style={styles.applyContainer}
      onPress={handleApply}
    >
      <Text style={styles.applyText}>Apply Now</Text>
    </TouchableOpacity>
  )
)}


{/* ‚úèÔ∏è Employer actions */}
{showEmployerUI && (
  <View style={styles.employerButtons}>
    <TouchableOpacity
      style={[styles.editButton, { backgroundColor: '#4A80F0' }]}
      onPress={() =>
        router.push({ pathname: '/employer/editJob', params: { id: jobId as string } } as any)
      }
    >
      <Ionicons name="create-outline" size={20} color="#fff" />
      <Text style={styles.employerText}>Edit Job</Text>
    </TouchableOpacity>

    <TouchableOpacity
      style={[styles.editButton, { backgroundColor: '#EF4444' }]}
      onPress={handleDeleteJob}
    >
      <Ionicons name="trash-outline" size={20} color="#fff" />
      <Text style={styles.employerText}>Delete</Text>
    </TouchableOpacity>
  </View>
)}
</View>
    </View>
  );
};

export default JobDescription;
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  scrollContent: { flex: 1 },

  // ‚úÖ Header tr√°nh b·ªã taskbar Android che
  topView: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginHorizontal: 20,
    marginTop: Platform.OS === 'android' ? (StatusBar.currentHeight || 24) + 10 : 10,
    zIndex: 10,
  },

  buttons: {
    height: 40,
    width: 40,
    backgroundColor: 'white',
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },

  jobImage: { height: 100, width: 100, borderRadius: 50 },
  jobImageContainer: { marginTop: 10, height: 120, justifyContent: 'center', alignItems: 'center', backgroundColor: '#EBF2FC' },
  companyName: { alignItems: 'center', justifyContent: 'center', backgroundColor: '#EBF2FC', padding: 10 },
  companyNameText: { fontSize: 20, fontWeight: 'bold' },
  companyInfoBox: { flexDirection: 'row', justifyContent: 'space-between', paddingHorizontal: 20, marginVertical: 10 },
  companyInfoText: { fontSize: 15, fontWeight: 'bold' },
  companyInfoText2: { fontSize: 15, color: '#a9a9a9' },
  tabs: { flexDirection: 'row', justifyContent: 'space-between', marginHorizontal: 20, marginBottom: 10, gap: 10 },
  tabBox: { borderRadius: 15, height: 40, flex: 1, justifyContent: 'center', alignItems: 'center' },
  tabNormal: { backgroundColor: '#EEEEEE' },
  tabNormalText: { color: '#AAAAAA' },
  tabActive: { backgroundColor: '#2F264F' },
  tabActiveText: { color: 'white', fontWeight: 'bold' },
  contentTab: { backgroundColor: '#EEEEEE', borderRadius: 10, padding: 14, marginHorizontal: 20, marginBottom: 20 },
  descriptionContent: { fontSize: 15, color: 'black', textAlign: 'justify', marginBottom: 8 },
  bottomContainer: { flexDirection: 'row', alignItems: 'center', gap: 15, padding: 15, borderTopWidth: 1, borderTopColor: '#eee', backgroundColor: '#fff', elevation: 8, zIndex: 2,},
  heartContainer: { width: 55, height: 55, borderRadius: 28, backgroundColor: '#fff', alignItems: 'center', justifyContent: 'center', shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 5, elevation: 5 },
  applyContainer: { flex: 1, height: 55, backgroundColor: '#F97459', borderRadius: 30, justifyContent: 'center', alignItems: 'center' },
  applyText: { fontSize: 18, color: 'white', fontWeight: 'bold' },
  headerContainer: { margin: 20, padding: 15, borderRadius: 10, backgroundColor: '#EBF2FC' },
  jobInfoContainer: { flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: 10, marginVertical: 10 },
  jobInfoBox: { backgroundColor: '#2F80ED', paddingHorizontal: 10, paddingVertical: 5, borderRadius: 15 },
  jobInfoText: { fontSize: 14, color: '#fff', fontWeight: 'bold' },
  companyLocation: { flexDirection: 'row', alignItems: 'center', gap: 5 },
  employerButtons: {
  flexDirection: 'row',
  justifyContent: 'space-between',
  alignItems: 'center',
  gap: 10,
},
editButton: {
  flexDirection: 'row',
  alignItems: 'center',
  justifyContent: 'center',
  paddingVertical: 12,
  paddingHorizontal: 18,
  borderRadius: 14,
  flex: 1,
},
employerText: {
  color: '#fff',
  fontWeight: '600',
  marginLeft: 6,
},
appliedInfoBox: {
  backgroundColor: '#E8FFF2',
  padding: 12,
  borderRadius: 10,
  marginHorizontal: 16,
  marginTop: 10,
  borderWidth: 1,
  borderColor: '#B2F2BB',
  gap: 4,
},
appliedInfoText: {
  color: '#2E7D32',
  fontWeight: 'bold',
  fontSize: 14,
},
appliedInfoStatus: {
  fontSize: 13,
  color: '#333',
},
appliedInfoDate: {
  fontSize: 12,
  color: '#666',
},
});
