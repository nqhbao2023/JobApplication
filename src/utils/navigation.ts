import { router } from "expo-router";
import { auth, db } from "@/config/firebase";
import { getDoc, doc } from "firebase/firestore";

/**
 * üß≠ smartBack v2.1 ‚Äî Phi√™n b·∫£n an to√†n v√† t·ªëi ∆∞u h∆°n
 *
 * H√†nh vi:
 * 1Ô∏è‚É£ N·∫øu c√≥ th·ªÉ quay l·∫°i trong stack ‚Üí back()
 * 2Ô∏è‚É£ N·∫øu c√≥ fallbackRoute ƒë∆∞·ª£c truy·ªÅn ‚Üí replace ƒë·∫øn ƒë√≥
 * 3Ô∏è‚É£ N·∫øu user ch∆∞a ƒëƒÉng nh·∫≠p ‚Üí chuy·ªÉn ƒë·∫øn trang login
 * 4Ô∏è‚É£ N·∫øu user l√† candidate ‚Üí quay v·ªÅ trang ·ª©ng tuy·ªÉn
 * 5Ô∏è‚É£ N·∫øu user l√† employer ‚Üí quay v·ªÅ danh s√°ch ·ª©ng vi√™n
 * 6Ô∏è‚É£ N·∫øu kh√¥ng x√°c ƒë·ªãnh ‚Üí fallback v·ªÅ /(tabs)
 */
export const smartBack = async (fallbackRoute?: string) => {
  try {
    // ‚úÖ ∆Øu ti√™n quay l·∫°i stack c≈© n·∫øu c√≥
    if (router.canGoBack?.()) {
      router.back();
      return;
    }

    // ‚úÖ N·∫øu ƒë∆∞·ª£c truy·ªÅn fallbackRoute c·ª• th·ªÉ
    if (fallbackRoute) {
      router.replace(fallbackRoute as never);
      return;
    }

    // ‚úÖ Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    const user = auth.currentUser;
    if (!user) {
      router.replace("/(auth)/login" as never);
      return;
    }

    // ‚úÖ L·∫•y th√¥ng tin role t·ª´ Firestore
    const snap = await getDoc(doc(db, "users", user.uid));
    const role = snap.exists() ? snap.data().role : "candidate";

    // ‚úÖ ƒêi·ªÅu h∆∞·ªõng theo role
    switch (role) {
      case "candidate":
        router.replace("/(candidate)/appliedJob" as never);
        break;
      case "employer":
        router.replace("/(employer)/appliedList" as never);
        break;
      default:
        router.replace("/(tabs)" as never);
        break;
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è smartBack fallback error:", error);
    router.replace("/(tabs)" as never);
  }
};

/**
 * üîÅ Quay l·∫°i trang ch√≠nh c·ªßa Candidate
 * (·ª©ng d·ª•ng th·ª±c t·∫ø: sau khi Apply Job, Submit CV, ho·∫∑c JobDescription)
 */
export const backToCandidate = () => smartBack("/(candidate)/appliedJob");

/**
 * üîÅ Quay l·∫°i trang ch√≠nh c·ªßa Employer
 * (·ª©ng d·ª•ng th·ª±c t·∫ø: sau khi duy·ªát ·ª©ng vi√™n, xem chi ti·∫øt, ho·∫∑c t·∫°o job)
 */
export const backToEmployer = () => smartBack("/(employer)/appliedList");

/**
 * üß© H√†m chuy·ªÉn ƒë·∫øn ƒë√∫ng trang H·ªì s∆° t√πy role (d√πng chung)
 * Gi√∫p d√πng chung n√∫t avatar profile cho c·∫£ Candidate v√† Employer
 */
export const goToProfile = async () => {
  try {
    const user = auth.currentUser;
    if (!user) {
      router.push("/(auth)/login");
      return;
    }

    const snap = await getDoc(doc(db, "users", user.uid));
    const role = snap.exists() ? snap.data().role : "candidate";

    // ‚úÖ D·∫´n h∆∞·ªõng r√µ r√†ng theo role (TypeScript h·ª£p l·ªá)
    if (role === "candidate") {
      router.navigate("/(candidate)/profile");
    } else if (role === "employer") {
      router.navigate("/(employer)/profile");
    } else {
      router.navigate("/(shared)/person");
    }
  } catch (error) {
    console.error("‚ö†Ô∏è goToProfile error:", error);
    router.navigate("/(candidate)/profile");
  }
};

